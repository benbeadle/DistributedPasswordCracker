/*
Call lsp_server_create
Call lsp_server_read
When a worker joins:
Keep track of the number of workers available
When you receive a crack request:
Assign cracking to available workers
Using lsp_server_write
When you receive a password from a worker
Send the password to the corresponding request
Using lsp_server_write
*/

int max_cracking_length = 'z';
bool keepRunning = true;

void ctrlHandler(int dummy=0) {
    keepRunning = false;
}


// TODO Someone check that this is the right idea. Is this what we decided to do? I've slept since then.
// TODO Copy Matt's linked list functions over to fit our needs here.

// The structure of the different segments of a crack request
typedef struct{
    char* start;
	char* end;
	bool state; //True means seen and success, False means not seen yet
}crack_request_segment;

// A structure holding all the segments of a crack request
typedef struct{
	crack_request_segment segment;
	crack_request_segment* next;
}crack_request;

// A list structure will all requests sent from clients in it
typedef struct{
	crack_request request;
	crack_request* next;
}requests_list;


int main(int argc, char *argv[])
{
	uint8_t* pld;
	char* port = argv[0];
	int number_of_workers = 0;
	
	//TODO Correctly convert port to int not char*
	lsp_server* server = lsp_server_create(int(port));

	//TODO Maybe split this so that it doesn't block on the reading? Child/parent threads?
	
	signal(SIGINT, ctrlHandler);
	signal(SIGKILL, ctrlHandler);
	
	while(keepRunning) {
	
		//TODO what is the conn_id? Something we make or lower makes?
		void* pld;
		int size = lsp_server_read(server, pld, uint32_t* conn_id);
		//TODO Figure out the structure of our messages
		//TODO Break pld up to see what type of message it is
		if(pld is a join message) {
			number_of_workers = number_of_workers + 1;
			//TODO Add a structure or something with worker ids so we can correctly write to different workers
			//TODO Select next segment and send it to new worker
			void* segment;
			bool success = lsp_server_write(server, segment, sizeOf(segment), conn_id);
			if(success == FALSE) {
				printf("ERROR: Write failed");
			}
		}
		
		if(pld is a crack request) { 
			//TODO Segment it into packets.
			//TODO Make the correct message
			//TODO Make all segments at once or only partially
		}
		
		if(pld is worker response) {
			if(pld is x) {
				//TODO delete segment from inner list
				//TODO Send next segment
				bool success = lsp_server_write(server, segment, sizeOf(segment), conn_id);
				if(success == FALSE) {
					printf("ERROR: Write failed");
				}
			}
			if(pld is success) {
				//TODO Forward correct password to resquest client
				bool success = lsp_server_write(server, segment, sizeOf(segment), conn_id);
				if(success == FALSE) {
					printf("ERROR: Write failed");
				}
				//TODO Delete whole inner list
			}
		}
	}
	
	lsp_server_close(server, uint32_t conn_id);
		
	return 0;
}