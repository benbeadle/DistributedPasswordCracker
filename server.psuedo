#include <iostream>
#include <queue>
#include <string>
#include <list>
using namespace std;

const int JOBSIZE = 1000;

bool signal_exit = false;
void ctrlExit() {
	signal_exit = true;
}

class Job {
	string hash;
	int len;
	int conn_id;
	list<tuple<string, len>> subjobs;
	Job(string h, int l, int c) {
		hash = h;
		len = l;
		conn_id = c;
	}
}

int main(int argc, char *argv[]) {
	signal(SIGABRT,ctrlExit);
	signal(SIGTERM,ctrlExit);
	
	//Create the variables
	//TODO: Check for valid arguments
	void* pld;
	uint32_t* conn_id;
	int port = int(argv[0]);
	queue<Job> jobs;
	lsp_server* server = lsp_server_create(port);
	
	if(server == NULL) {
		cout << "Unable to start server on port " << port << "." << endl;
		return 0;
	  }
	
	while(!signal_exit) {
		int size = lsp_server_read(server, pld, uint32_t* conn_id);
		
		if(size > 0) {
			char* read = (char*)pld;
			char command = read[0];
			
			if(command == 'c') { //
			
			}
			
		} else if(size == -1) {
			cout << "Connecction lost." << endl;
			signal_exit = true;
		}
	}
}