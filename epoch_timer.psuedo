#include <time.h>
//http://cboard.cprogramming.com/c-programming/112560-timers-c.html 
//default value for timer is 2 seconds

timer_process(int n){
	every n seconds send signal that networkIO client-states can intercept
	
	//Creating a timer thread
	void start_timer(int seconds){
		pthread_t thread_id;
		int rc = 0;
	 
		rc =  pthread_create(&thread_id, NULL, g_start_timer, (void *) &seconds);
		if(rc){	printf("=== Failed to create thread\n"); }
	 
		pthread_join(thread_id, NULL); 
		return 0;
	}
	
	/* call back function - inform the user the time has expired */
	void timeout_cb()
	{
		printf("=== your time is up ===\n");
	}
 
	/* Go to sleep for a period of seconds */
	static void* g_start_timer(void *args)
	{
		/* function pointer */
		void (*function_pointer)();
	 
		/* cast the seconds passed in to int and 
		 * set this for the period to wait */
		int seconds = *((int*) args);
		printf("go to sleep for %d\n", seconds);
		 
		/* assign the address of the cb to the function pointer */
		function_pointer = timeout_cb;
		 
		sleep(seconds);
		/* call the cb to inform the user time is out */
		(*function_pointer)();
		 
		pthread_exit(NULL);
	}
 	
	//epoch timer fires a client when
	
	// CLIENT SIDE	
		//-Resend a cnnection request (original request was not ACK yet)
		//-Send an ACK for most recent recived data or ACK with seqNum 0 if no data messages have been recieved. 
		//-Data message was sent but not ACK, then resend data message
		
	//SERVER SIDE
		//-ACK connection request, if no data message has been recieved
		//-ACK most recent recieved data message if any
		//-If data message has been sent, but not ACK yet, then resend data message
		
	//TODO: Need to handle multipule duplication messages
}